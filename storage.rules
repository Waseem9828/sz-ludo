rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Default deny all access
    match /{allPaths=**} {
      allow read, write: if false;
    }

    // Rules for user-uploaded deposit screenshots
    // Path: /deposits/{userId}/{fileName}
    match /deposits/{userId}/{fileName} {
      // Allow read only by the user who uploaded the file
      allow get: if request.auth != null && request.auth.uid == userId;
      // Allow create only by the authenticated user into their own folder
      allow create: if request.auth != null && request.auth.uid == userId;
      // Disallow update and delete for users to prevent tampering
      allow update, delete: if false;
    }

    // Rules for user-uploaded game result screenshots
    // Path: /screenshots/{gameId}/{fileName}
    match /screenshots/{gameId}/{fileName} {
       // Allow create by any authenticated user
      allow create: if request.auth != null;
      // Allow anyone to read game screenshots (e.g., for admin review)
      allow get: if true;
       // Disallow update and delete for users
      allow update, delete: if false;
    }

    // Rules for admin-uploaded banner images
    // Path: /banners/{category}/{fileName}
    match /banners/{category}/{fileName} {
      // Allow anyone to read banner images
      allow get: if true;
      // Allow write (create, update, delete) only if the user is an admin
      // This requires a custom claim or a check against the Firestore database.
      // The rule below is a placeholder for checking an admin role from Firestore.
      // You must have `role: 'superadmin'` on the user document in Firestore.
      allow write: if request.auth != null && 
                     firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
  }
}
