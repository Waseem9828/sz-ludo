
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
  
    // =============================================
    // Public Assets
    // Anyone can read files in the 'public/' directory.
    // Nobody can write to it from the client.
    // =============================================
    match /public/{allPaths=**} {
      allow read;
      allow write: if false;
    }

    // =============================================
    // User-Specific Files
    // =============================================
    // Generic rule for user-private folders.
    // A user can read/write to their own folder.
    match /users/{userId}/{allPaths=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // =============================================
    // Deposit Screenshots
    // Any authenticated user can upload to their own deposit folder.
    // The path must match deposits/{userId}/...
    // =============================================
    match /deposits/{userId}/{allPaths=**} {
      allow create: if request.auth != null && request.auth.uid == userId;
      // Reading/Deleting should be done by an admin.
      allow read, delete: if false; 
    }
    
    // =============================================
    // Game Screenshots
    // Any authenticated user can upload a screenshot for a game.
    // We don't restrict by game players here for simplicity,
    // as the Firestore rules will control who can update the game doc with the URL.
    // =============================================
    match /screenshots/{gameId}/{allPaths=**} {
      allow create: if request.auth != null;
      allow read: if request.auth != null; // Allow players to view screenshots.
      allow delete: if false; // Deletion should be an admin action.
    }
    
    // =============================================
    // Banner Images (for Admin)
    // Only an admin should be able to upload banners.
    // This requires a custom claim 'role' set to 'superadmin'.
    // NOTE: For this to work, you must set the custom claim on the admin user.
    // =============================================
    match /banners/{allPaths=**} {
        allow read; // Anyone can read banners.
        // allow write: if request.auth != null && request.auth.token.role == 'superadmin';
        allow write: if request.auth != null; // Temporarily allow any auth user for easier setup
    }

    // =============================================
    // Tournament Images (for Admin)
    // =============================================
     match /tournaments/{allPaths=**} {
        allow read; // Anyone can read tournament images.
        allow write: if request.auth != null; // Temporarily allow any auth user for easier setup
    }
  }
}
