
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
  
    // Helper function to check if the user is authenticated.
    function isAuth() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of the resource.
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    // Screenshots for game results. Only players in the game can upload.
    // The game document must exist.
    match /screenshots/{gameId}/{fileName} {
      allow read: if isAuth();
      allow write: if isAuth() && exists(/databases/$(database)/documents/games/$(gameId)) && 
                      (request.auth.uid in get(/databases/$(database)/documents/games/$(gameId)).data.playerUids);
    }
    
    // Deposit screenshots. Only the user themselves can upload to their own folder.
    match /deposits/{userId}/{fileName} {
      allow read: if isOwner(userId) || request.auth.token.role in ['superadmin', 'finance']; // Owner and admins can read.
      allow write: if isOwner(userId); // Only the user can upload to their own deposit folder.
    }
    
    // Banner images for settings. Only admins can upload/delete.
    match /banners/{folder}/{fileName} {
       allow read: if true; // Banners are public
       allow write, delete: if isAuth() && request.auth.token.role == 'superadmin';
    }
    
     // Tournament images. Only admins can upload/delete.
    match /tournaments/{fileName} {
        allow read: if true; // Tournament images are public
        allow write, delete: if isAuth() && request.auth.token.role == 'superadmin';
    }
    
    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
