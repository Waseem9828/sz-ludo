
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isAdmin() {
      // In a real app, you'd check a custom claim or a Firestore document.
      // For this example, we'll assume an admin role exists in Firestore.
      // Note: This requires a Firestore read. Make sure your rules allow it.
      return request.auth != null && get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    // User-specific files (e.g., profile pictures)
    // For simplicity, we are not adding profile picture uploads yet.
    // match /avatars/{userId}/{fileName} {
    //   allow read;
    //   allow write: if isOwner(userId);
    // }

    // Deposit screenshots
    match /deposits/{userId}/{fileName} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) 
                   && request.resource.size < 5 * 1024 * 1024
                   && request.resource.contentType.matches('image/.*');
    }

    // Game result screenshots
    match /screenshots/{userId}/{fileName} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isOwner(userId) 
                   && request.resource.size < 5 * 1024 * 1024
                   && request.resource.contentType.matches('image/.*');
    }

    // Banners and general content uploaded by admin
    match /banners/{allPaths=**} {
      allow read; // All users can read banners
      allow write: if isAdmin(); // Only admin can upload banners
    }
     match /tournaments/{allPaths=**} {
      allow read;
      allow write: if isAdmin();
    }
      match /homecards/{allPaths=**} {
      allow read;
      allow write: if isAdmin();
    }
     match /referral/{allPaths=**} {
      allow read;
      allow write: if isAdmin();
    }


    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
