
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    
    // Function to check if the user is authenticated
    function isAuth() {
      return request.auth != null;
    }

    // Banners can be read by anyone, but only written/deleted by an admin (implicitly, as we don't have roles in storage rules, we check for auth)
    // For stronger security, you'd use custom claims for roles.
    match /banners/{folder}/{fileName} {
      allow read: if true;
      allow write, delete: if isAuth();
    }
    
    // Tournament images can be read by anyone, written by authenticated users (admins).
    match /tournaments/{fileName} {
        allow read: if true;
        allow write: if isAuth();
    }

    // Deposit screenshots: A user can only write to their own folder.
    match /deposits/{userId}/{fileName} {
      allow read, write, delete: if isAuth() && request.auth.uid == userId;
    }

    // Game result screenshots: A player involved in the game can write to the game's folder.
    // The game document ID is part of the path.
    match /screenshots/{gameId}/{fileName} {
      allow read: if isAuth(); // Allow participants or admins to view, ideally checked via Firestore.
      allow write: if isAuth(); // Simplified rule: any authenticated user can write. A stricter rule would check if user is a player in the game.
    }
  }
}
