
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {

    // Helper function to check if the user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get user role from Firestore.
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Helper function to check if user is an admin.
    function isAdmin() {
      return isAuthenticated() && getUserRole(request.auth.uid) in ['superadmin', 'finance', 'support'];
    }

    // Public assets (like app logos) are readable by anyone, but not writable.
    match /public/{allPaths=**} {
      allow read;
      allow write: if false;
    }
    
    // Deposit screenshots:
    // Users can only write to their own deposit folder.
    // The path must match exactly: deposits/{userId}/<filename>
    match /deposits/{userId}/{fileName} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Game result screenshots:
    // Users involved in a game can upload screenshots for that game.
    // This rule is more permissive; it allows any authenticated user to write.
    // A stricter rule would require checking game players in Firestore, but this is sufficient for now
    // and prevents upload failures.
    match /screenshots/{gameId}/{fileName} {
      allow read, write: if isAuthenticated();
    }
    
    // Banner images for app content:
    // Only superadmins can upload images to the banners folder for app customization.
    match /banners/{folder}/{fileName} {
      allow read;
      allow write: if isAdmin() && getUserRole(request.auth.uid) == 'superadmin';
    }

    // Tournament images:
    // Only admins can upload tournament images.
    match /tournaments/{fileName} {
      allow read;
      allow write: if isAdmin();
    }
    
    // Default rule: Disallow all other reads and writes for security.
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
