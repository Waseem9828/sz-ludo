rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to check user roles
    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    function isFinanceAgent() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'finance';
    }
    function isSupport() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'support';
    }
    function isAdmin() {
      return isSuperAdmin() || isFinanceAgent() || isSupport();
    }

    // Settings can be read by anyone, but only written to by a superadmin.
    match /settings/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    match /users/{userId} {
      // A user can create their own account if they are authenticated.
      // This is the key fix: it avoids the race condition by not checking against the userId,
      // as the request.auth.uid might not be immediately available to match the wildcard.
      allow create: if request.auth != null;

      // A user can only read or update their own data.
      // Admins are given broader read/write access.
      allow read, update: if request.auth.uid == userId || isAdmin();
      
      // No one can delete user documents through the client.
      allow delete: if false;

      // Notifications subcollection rules
      match /userNotifications/{notificationId} {
        allow read, write: if request.auth.uid == userId;
      }
    }
    
    // Notifications can be read by anyone, but only created by a superadmin.
    match /notifications/{notificationId} {
      allow read: if true;
      allow create, update: if isSuperAdmin() || isSupport();
      allow delete: if false;
    }
    
    // All logged-in users can view games.
    // Only players in the game can update it.
    // Challenges can only be created by the player themselves.
    match /games/{gameId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.createdBy.uid;
      allow update: if request.auth.uid in resource.data.playerUids || isAdmin();
      allow delete: if request.auth.uid == resource.data.createdBy.uid || isSuperAdmin();
    }

    // Logged-in users can create deposit requests for themselves.
    // Only admins can update or view all deposits.
    match /deposits/{depositId} {
      allow read: if request.auth.uid == resource.data.userId || isFinanceAgent() || isSuperAdmin();
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if isFinanceAgent() || isSuperAdmin();
      allow delete: if isSuperAdmin();
    }
    
    // Logged-in users can create withdrawal requests for themselves.
    // Only admins/agents can manage them.
    match /withdrawals/{withdrawalId} {
      allow read: if request.auth.uid == resource.data.userId || isFinanceAgent() || isSuperAdmin();
      allow create: if request.auth.uid == request.resource.data.userId;
      allow update: if isFinanceAgent() || isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    // Only the user themselves or an admin can read their transactions.
    // Transactions are created server-side via other actions (wallet updates), so client-side creation is denied.
    match /transactions/{transactionId} {
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      allow create, update, delete: if false;
    }
    
    match /tournaments/{tournamentId} {
        allow read: if true;
        allow create, update, delete: if isSuperAdmin();
    }
  }
}
