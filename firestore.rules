
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSuperAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    function isSupport() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'support';
    }
    
    function isFinance() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'finance';
    }
    
    function isAdmin() {
      return isSuperAdmin() || isSupport() || isFinance();
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      // Any authenticated user can create their own user document
      allow create: if request.auth != null && request.auth.uid == userId;
      // Users can read their own data. Admins can read anyone's data.
      allow read: if isOwner(userId) || isAdmin();
      // Users can update their own non-critical data. Admins can update anything.
      allow update: if isOwner(userId) || isAdmin();
      // Only superadmins can delete users (for now, can be expanded)
      allow delete: if isSuperAdmin();
    }

    // Games collection
    match /games/{gameId} {
      // Any authenticated user can read games (to see challenges/ongoing games)
      allow read: if request.auth != null;
      // Authenticated users can create games (challenges)
      allow create: if request.auth != null;
      // Only players in the game can update it.
      allow update: if request.auth != null && request.auth.uid in resource.data.playerUids;
       // Only the creator can delete a challenge, or an admin
      allow delete: if request.auth != null && (request.auth.uid == resource.data.createdBy.uid || isAdmin());
    }

    // Transactions collection
    match /transactions/{transactionId} {
        // Users can read their own transactions. Admins can read all.
        allow read: if request.auth != null && (isOwner(resource.data.userId) || isAdmin());
        // Transactions are created via backend functions/rules logic, not directly by client
        allow create, update, delete: if false; 
    }
    
    // Withdrawals collection
    match /withdrawals/{withdrawalId} {
        // Users can see their own requests. Finance/Admins can see all.
        allow read: if request.auth != null && (isOwner(resource.data.userId) || isFinance() || isSuperAdmin());
        // Requests are created by the user
        allow create: if request.auth != null && isOwner(request.resource.data.userId);
        // Only Finance/Admins can update (assign, complete, reject)
        allow update, delete: if isFinance() || isSuperAdmin();
    }

    // Deposits collection
    match /deposits/{depositId} {
         // Users can see their own requests. Finance/Admins can see all.
        allow read: if request.auth != null && (isOwner(resource.data.userId) || isFinance() || isSuperAdmin());
        // Requests are created by the user
        allow create: if request.auth != null && isOwner(request.resource.data.userId);
        // Only Finance/Admins can update (approve, reject)
        allow update, delete: if isFinance() || isSuperAdmin();
    }
    
    // Notifications collection - currently only admin can create
    match /notifications/{notificationId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isSuperAdmin() || isSupport();
    }
    
    // Settings collection
    match /settings/{settingId} {
      // Any authenticated user can read the settings
      allow read: if request.auth != null;
      // Only superadmins can change the settings
      allow write: if isSuperAdmin();
    }
    
    // Tournaments collection
    match /tournaments/{tournamentId} {
      // Any authenticated user can read tournaments
      allow read: if request.auth != null;
      // Only superadmins can create, update, or delete tournaments
      allow write: if isSuperAdmin();
    }
  }
}
