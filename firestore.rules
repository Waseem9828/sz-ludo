
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    // USER PROFILES
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
      allow create: if isSignedIn() && isOwner(userId); // Allow user to create their own profile
      allow update: if isSignedIn() && (isOwner(userId) || isAdmin());
      // No one can delete user profiles for now
      allow delete: if false;

      // User-specific subcollections
      match /userNotifications/{notificationId} {
        allow read, write: if isSignedIn() && isOwner(userId);
      }
    }

    // GAMES
    match /games/{gameId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn(); // User can create a game
      allow update: if isSignedIn() && request.auth.uid in resource.data.playerUids; // Only players in the game can update it
      allow delete: if isSignedIn() && request.auth.uid == resource.data.createdBy.uid; // Only creator can delete their 'challenge'
    }

    // DEPOSITS & WITHDRAWALS (Admin controlled)
    match /deposits/{depositId} {
       allow read, create: if isSignedIn(); // Users can create deposit requests
       allow update: if isAdmin(); // Only admin can approve/reject
    }

    match /withdrawals/{withdrawalId} {
       allow read, create: if isSignedIn(); // Users can create withdrawal requests
       allow update: if isAdmin(); // Only admin can approve/reject
    }
    
    // TRANSACTIONS
    match /transactions/{transactionId} {
        // User can create their own transaction record, but can't specify all fields
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        // User can only read their own transactions. Admin can read all.
        allow read: if isSignedIn() && (isOwner(resource.data.userId) || isAdmin());
        // No one can update or delete transactions to maintain a clean record
        allow update, delete: if false;
    }

    // NOTIFICATIONS (Admin write, users read)
    match /notifications/{notificationId} {
        allow read: if true;
        allow write: if isAdmin();
    }
    
    // TOURNAMENTS (Admin write, users read)
    match /tournaments/{tournamentId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }

    // SETTINGS (Admin write, everyone read)
    match /settings/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}
