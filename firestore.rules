rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin roles
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['superadmin', 'finance', 'support'];
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read any user profile. Users can only read their own.
      allow get: if request.auth.uid == userId || isAdmin();
      
      // Admins can list all users. This is crucial for the admin panel.
      allow list: if isAdmin();
      
      // A user can only create their own document.
      allow create: if request.auth.uid == userId;
      
      // Admins can update any user. Users can only update their own profile.
      allow update: if request.auth.uid == userId || isAdmin();
      
      // No user should be able to delete their account directly through the client.
      allow delete: if false;

      // Subcollection for user notifications
      match /userNotifications/{notificationId} {
        allow read, write: if request.auth.uid == userId;
      }
    }

    // Rules for the 'games' collection
    match /games/{gameId} {
      // Any authenticated user can view or list games.
      allow get, list: if request.auth.uid != null;
      
      // Any authenticated user can create a game.
      allow create: if request.auth.uid != null;
      
      // Only players in the game or an admin can update it.
      allow update: if request.auth.uid in resource.data.playerUids || isAdmin();
      
      // Only the creator of a challenge or an admin can delete it.
      allow delete: if request.auth.uid == resource.data.createdBy.uid || isAdmin();
    }

    // Rules for the 'transactions' collection
    match /transactions/{transactionId} {
       // A user can create their own transaction record.
       allow create: if request.auth.uid == request.resource.data.userId;

       // A user can only read their own transactions. Admins can read any.
       allow get, list: if request.auth.uid == resource.data.userId || isAdmin();
       
       // Transactions cannot be updated or deleted by clients.
       allow update, delete: if false;
    }

    // Rules for the 'deposits' collection (manual deposits)
    match /deposits/{depositId} {
      // Users can create their own deposit requests.
      allow create: if request.auth.uid == request.resource.data.userId;

      // Only admins can read, update or delete deposit requests.
      allow read, update, delete: if isAdmin();
    }

    // Rules for the 'withdrawals' collection
    match /withdrawals/{withdrawalId} {
        // Users can create their own withdrawal requests.
        allow create: if request.auth.uid == request.resource.data.userId;
        
        // Only admins can read, update, or delete withdrawal requests.
        allow read, update, delete: if isAdmin();
    }

    // Rules for general app settings
    match /settings/app-config {
      // Anyone can read the settings.
      allow get: if true;
      // Only admins can write/update the settings.
      allow write: if isAdmin();
    }

    // Rules for notifications
    match /notifications/{notificationId} {
        // Anyone can read notifications.
        allow read: if true;
        // Only admins can create/update/delete notifications.
        allow write: if isAdmin();
    }
    
    // Rules for tournaments
    match /tournaments/{tournamentId} {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }
  }
}