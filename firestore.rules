rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isAdmin() {
      // Ensure the user has a role token. This happens after their user doc is created.
      return isAuth() && request.auth.token.role in ['superadmin', 'finance', 'support'];
    }

    function isSuperAdmin() {
      return isAuth() && request.auth.token.role == 'superadmin';
    }
    
    // --- Collections Rules ---

    // Settings can be read by anyone, but only written by admin
    match /settings/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    // Notifications can be read by anyone, but only written by admin
    match /notifications/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    // Users collection
    match /users/{userId} {
      // Read: self or admin
      allow get: if isOwner(userId) || isAdmin();
      allow list: if isAdmin();

      // Create: Only for the user themselves upon sign-up
      allow create: if isOwner(userId);

      // Update: self or admin
      allow update: if isOwner(userId) || isAdmin();

      // Delete: only superadmin
      allow delete: if isSuperAdmin();

      // Subcollection for user-specific notification read status
      match /userNotifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Transactions
    match /transactions/{transactionId} {
      // Read: Owner of the transaction or any admin
      allow get: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
      allow list: if isAdmin(); // Admin can list all transactions

      // Create: Any authenticated user can create a transaction for themselves
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;

      // Update/Delete: Only admins can modify transaction logs
      allow update, delete: if isAdmin();
    }

    // Games
    match /games/{gameId} {
      // Read: Any authenticated user can read/list games (for lobbies etc.)
      allow read, list: if isAuth();

      // Create: Any authenticated user can create a game
      allow create: if isAuth() && request.resource.data.createdBy.uid == request.auth.uid;

      // Update: Only players in the game or an admin can update it
      allow update: if isAuth() && (request.auth.uid in resource.data.playerUids || isAdmin());

      // Delete: Only admins can delete games
      allow delete: if isAdmin();
    }
    
    // Withdrawals
    match /withdrawals/{withdrawalId} {
      // Read: The user who made the request, or an admin
      allow get: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
      allow list: if isAdmin(); // Admin can list all withdrawal requests

      // Create: Only for the user themselves
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;

      // Update/Delete: Only admins can modify withdrawals
      allow update, delete: if isAdmin();
    }
    
    // Deposits
    match /deposits/{depositId} {
      // Read: The user who made the request, or an admin
      allow get: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
      allow list: if isAdmin(); // Admin can list all deposit requests

      // Create: Only for the user themselves
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      
      // Update/Delete: Only admins can modify deposits
      allow update, delete: if isAdmin();
    }
    
    // Tournaments
    match /tournaments/{tournamentId} {
      // Read: Anyone can see tournaments
      allow read, list: if true;
      // Write: Only superadmin can manage tournaments
      allow create, update, delete: if isSuperAdmin();
    }
  }
}
