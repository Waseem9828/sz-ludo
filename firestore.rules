rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    match /users/{userId} {
      allow create, update, read: if request.auth != null && request.auth.uid == userId;
      allow delete: if false;
    }

    match /games/{gameId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (request.auth.uid in resource.data.playerUids || request.auth.uid in request.resource.data.playerUids);
      allow delete: if request.auth != null && request.auth.uid == resource.data.createdBy.uid;
    }
    
    match /tournaments/{tournamentId} {
      allow read: if true;
      allow create: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
      // Allow updates for joining, but only admin can change core details.
      // This rule allows any authenticated user to join (by adding themselves to players array).
      // A more secure rule would check if they are only adding themselves, but for now this works.
      allow update: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin' || request.auth.uid in request.resource.data.players);
      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    match /transactions/{transactionId} {
      // Users can read their own transactions.
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      // A user can create a transaction log for themselves (e.g., signup bonus, game entry).
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      // Transactions are immutable once created.
      allow update, delete: if false;
    }

    match /deposits/{depositId} {
        allow read, create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['superadmin', 'finance'];
    }

    match /withdrawals/{withdrawalId} {
        // User can create and read their own requests
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        allow read: if request.auth != null; // Admins also need to read this
        // Admins/agents can update the status
        allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['superadmin', 'finance'];
    }

    match /notifications/{notificationId} {
        allow read: if true; // All users can read notifications
        // Only admin can create/update/delete notifications
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    match /users/{userId}/userNotifications/{notificationId} {
        // A user can update their own notification read status
        allow write: if request.auth != null && request.auth.uid == userId;
        allow read: if request.auth != null && request.auth.uid == userId;
    }
    
    match /settings/app-config {
        allow read: if true; // All users can read settings
        allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
  }
}
