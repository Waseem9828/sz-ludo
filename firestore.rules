
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check for admin roles
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['superadmin', 'finance', 'support'];
    }
    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
     function isFinanceAgent() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['superadmin', 'finance'];
    }

    // Users Collection
    match /users/{userId} {
      // Allow any authenticated user to create their own user document.
      // This is a simplified rule to prevent race conditions during signup.
      allow create: if request.auth != null;
      
      // A user can read, update, or delete their own document.
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;

      // Admins can read any user's document.
      allow get, list: if isAdmin();
      
      // Superadmin can update any user's document.
      allow update: if isSuperAdmin();

      // User-specific notifications subcollection
      match /userNotifications/{notificationId} {
        allow read, write: if request.auth.uid == userId;
      }
    }

    // Games Collection
    match /games/{gameId} {
      // Any authenticated user can read the list of games.
      allow list, get: if request.auth != null;

      // Only authenticated users can create a game.
      allow create: if request.auth != null;

      // Only players in the game can update it.
      allow update: if request.auth != null && request.auth.uid in resource.data.playerUids;

      // The creator can delete a challenge if it's still in the 'challenge' state.
      allow delete: if request.auth != null && request.auth.uid == resource.data.createdBy.uid && resource.data.status == 'challenge';
    }

    // Settings Collection
    match /settings/{docId} {
      allow get: if request.auth != null;
      allow write: if isSuperAdmin();
    }

    // Deposits Collection (for manual deposit requests)
    match /deposits/{depositId} {
       allow create: if request.auth != null;
       allow read, write: if isFinanceAgent();
    }
    
    // Withdrawals Collection
    match /withdrawals/{withdrawalId} {
       allow create: if request.auth != null;
       allow read, update: if isFinanceAgent();
    }

    // Transactions Collection
    match /transactions/{transactionId} {
        // Users can only see their own transactions.
        allow read: if request.auth.uid == resource.data.userId;
        // Admins can see all transactions.
        allow list, get: if isAdmin();
        // Transactions are created by trusted server-side logic (or cloud functions), not directly by clients.
        allow create: if request.auth != null; 
    }
    
    // Notifications Collection (Read-only for users, write for admin)
    match /notifications/{notificationId} {
      allow get, list: if request.auth != null;
      allow create, update, delete: if isSuperAdmin();
    }

    // Tournaments Collection
    match /tournaments/{tournamentId} {
        allow get, list: if request.auth != null;
        allow create, update, delete: if isSuperAdmin();
    }
  }
}
