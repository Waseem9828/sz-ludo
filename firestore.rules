
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to make rules cleaner
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isSuperAdmin() {
      return isSignedIn() && getRole(request.auth.uid) == 'superadmin';
    }
    
    function isSupport() {
       return isSignedIn() && getRole(request.auth.uid) in ['superadmin', 'support'];
    }

    function isFinance() {
       return isSignedIn() && getRole(request.auth.uid) in ['superadmin', 'finance'];
    }
    
    function isAdmin() {
        return isSignedIn() && getRole(request.auth.uid) in ['superadmin', 'finance', 'support'];
    }
    
    // USERS Collection
    // Defines who can read, create, and update user documents.
    match /users/{userId} {
      allow read: if isSignedIn() || isAdmin();
      
      // A user can create their own document.
      allow create: if isOwner(userId);
      
      // An owner can update their public profile info and KYC details (if not verified).
      // Admins can update almost anything.
      allow update: if (isOwner(userId) &&
                        !('wallet' in request.resource.data) &&
                        !('role' in request.resource.data) &&
                        !('status' in request.resource.data) &&
                        (resource.data.kycStatus != 'Verified' || !('aadhaar' in request.resource.data)))
                   || isSuperAdmin();

      // Only superadmin can delete users.
      allow delete: if isSuperAdmin();

      // User notifications subcollection
      match /userNotifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // GAMES Collection
    // Manages access to game/battle documents.
    match /games/{gameId} {
      // Allow read if user is a player in the game, or is an admin.
      allow read: if (isSignedIn() && request.auth.uid in resource.data.playerUids) || isSupport();
      
      // Allow create if user is signed in and has sufficient balance (checked by backend function).
      allow create: if isSignedIn();
      
      // Allow updates if user is a player in the game and the game is in a mutable state.
      // Protects critical fields from being tampered with.
      allow update: if (isSignedIn() && request.auth.uid in resource.data.playerUids) || isSuperAdmin();

      // Only the creator can delete an open challenge.
      allow delete: if isSignedIn() && request.auth.uid == resource.data.createdBy.uid && resource.data.status == 'challenge';
    }

    // TRANSACTIONS Collection
    // Rules for financial transaction logs.
    match /transactions/{transactionId} {
      // User can read their own transactions, admins can read all.
      allow read: if (isSignedIn() && request.auth.uid == resource.data.userId) || isAdmin();
      
      // Transactions are created by backend functions, not directly by clients.
      allow write: if false; 
    }

    // WITHDRAWALS Collection
    // Manages withdrawal requests.
    match /withdrawals/{withdrawalId} {
      // User can read their own withdrawal requests. Finance/Superadmin can read all.
      allow read: if (isSignedIn() && request.auth.uid == resource.data.userId) || isFinance();
      
      // Users can create withdrawal requests.
      allow create: if isSignedIn() && isOwner(request.resource.data.userId);
      
      // Only finance/superadmin can update (approve/reject).
      allow update: if isFinance();
      
      // Only superadmin can delete.
      allow delete: if isSuperAdmin();
    }
    
    // DEPOSITS Collection
    // Manages manual deposit requests.
    match /deposits/{depositId} {
        // User can read their own. Finance/Superadmin can read all.
        allow read: if (isSignedIn() && request.auth.uid == resource.data.userId) || isFinance();

        // User can create their own deposit request.
        allow create: if isSignedIn() && isOwner(request.resource.data.userId);

        // Only finance agents or superadmins can update (approve/reject).
        allow update: if isFinance();
        
        // Only superadmin can delete.
        allow delete: if isSuperAdmin();
    }

    // SETTINGS Collection
    // App-wide settings, only manageable by superadmin.
    match /settings/{docId} {
        // Anyone can read settings.
        allow read: if true;
        // Only superadmins can write/update settings.
        allow write: if isSuperAdmin();
    }
    
    // NOTIFICATIONS Collection
    // Rules for app-wide notifications.
    match /notifications/{notificationId} {
        // All signed-in users can read notifications.
        allow read: if isSignedIn();
        // Only admins can create/update/delete notifications.
        allow write: if isSupport();
    }

    // TOURNAMENTS Collection
    // Manages access to tournament data.
    match /tournaments/{tournamentId} {
        // All signed-in users can read tournament data.
        allow read: if isSignedIn();

        // Only superadmins can create, update, or delete tournaments.
        allow create, update, delete: if isSuperAdmin();
    }
  }
}
