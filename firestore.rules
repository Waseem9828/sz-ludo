
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isSuperAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }
    
    function isSupport() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'support';
    }

    function isFinance() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'finance';
    }
    
    function isAdmin() {
      return isSuperAdmin() || isSupport() || isFinance();
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // USERS collection
    match /users/{userId} {
      // Admins can read any user profile.
      // Users can only read their own profile.
      allow read: if isSignedIn() && (isAdmin() || isOwner(userId));

      // New users can create their own profile.
      allow create: if isSignedIn() && isOwner(userId);
      
      // Allow users to update their own displayName, photoURL, and KYC details.
      // Prevent users from updating their own role, wallet, or status.
      allow update: if isSignedIn() && (
        (isOwner(userId) && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL', 'aadhaar', 'pan', 'bankAccount', 'ifsc', 'bankName', 'upiId', 'kycStatus']) &&
          // User can set KYC to Pending, but cannot verify/reject it themselves.
          (request.resource.data.kycStatus == 'Pending' || resource.data.kycStatus == 'Rejected')
        ) ||
        // Admins can update more fields.
        (isSuperAdmin() || (isSupport() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status'])))
      );
      
      // Subcollection for user-specific notification read status
      match /userNotifications/{notificationId} {
        allow read, write: if isSignedIn() && isOwner(userId);
      }
    }
    
    // GAMES collection
    match /games/{gameId} {
      // Allow read if user is signed in. Public challenges can be seen by all.
      // Ongoing games are only visible to players or admins.
      allow read: if isSignedIn() && (
                      resource.data.status == 'challenge' ||
                      request.auth.uid in resource.data.playerUids ||
                      isAdmin()
                    );
                    
      // Only signed-in users can create a game (challenge).
      allow create: if isSignedIn() && request.resource.data.createdBy.uid == request.auth.uid;
      
      // Allow updates for game flow (accepting, setting room code, submitting results)
      // or by admins.
      allow update: if isSignedIn() && (
                      (request.auth.uid in resource.data.playerUids) ||
                      isAdmin()
                    );
                    
      // Users can delete their own challenges. Admins can delete any.
      allow delete: if isSignedIn() && (
                      (resource.data.status == 'challenge' && request.auth.uid == resource.data.createdBy.uid) ||
                      isSuperAdmin()
                    );
    }
    
    // DEPOSITS collection (Manual deposits)
    match /deposits/{depositId} {
      // Only Finance and SuperAdmins can read all requests.
      // Users can create, but not read them (for privacy).
      allow read: if isSignedIn() && (isFinance() || isSuperAdmin());
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      // Only Finance and SuperAdmins can update status.
      allow update: if isSignedIn() && (isFinance() || isSuperAdmin());
    }
    
    // WITHDRAWALS collection
    match /withdrawals/{withdrawalId} {
       // Only Finance and SuperAdmins can read all requests.
      allow read: if isSignedIn() && (isFinance() || isSuperAdmin());
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
       // Only Finance and SuperAdmins can update status.
      allow update: if isSignedIn() && (isFinance() || isSuperAdmin());
    }
    
    // TRANSACTIONS collection
    match /transactions/{transactionId} {
      // Admins can read all transactions.
      // Users can only read their own transactions.
      allow read: if isSignedIn() && (isAdmin() || request.auth.uid == resource.data.userId);
      // Transactions are created by server-side logic (or validated create rules), not directly by users.
      allow create: if isSignedIn(); // Simplified: backend functions will handle security
      allow update, delete: if false; // Transactions should be immutable
    }

    // SETTINGS collection
    match /settings/{docId} {
        // Everyone can read settings
        allow read: if true;
        // Only superadmins can write to settings
        allow write: if isSuperAdmin();
    }
    
    // NOTIFICATIONS collection
    match /notifications/{notificationId} {
        // All signed-in users can read notifications
        allow read: if isSignedIn();
        // Only admins can create/update/delete notifications
        allow write: if isSuperAdmin() || isSupport();
    }
    
    // TOURNAMENTS collection
    match /tournaments/{tournamentId} {
      // Anyone can read tournament info
      allow read: if true;
      // Only superadmins can create/update/delete tournaments
      allow write: if isSuperAdmin();
    }
  }
}
