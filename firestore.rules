
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =============================================
    // Users Collection
    // =============================================
    match /users/{userId} {
      // READ: A user can only read their own document.
      allow read: if request.auth != null && request.auth.uid == userId;

      // UPDATE: A user can only update their own document.
      // We are more permissive here to allow KYC updates etc. Specific field validation should be in Cloud Functions if needed.
      allow update: if request.auth != null && request.auth.uid == userId;

      // CREATE: A new user can create their own document.
      // request.auth must not be null, meaning the user is authenticated.
      // This is the key rule to prevent the sign-up race condition.
      allow create: if request.auth != null;

      // DELETE: Generally, users should not be able to delete their own accounts. This should be handled by an admin or a Cloud Function.
      allow delete: if false;

      // User-specific subcollection for notification read status.
      match /userNotifications/{notificationId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // =============================================
    // Games Collection
    // =============================================
    match /games/{gameId} {
      // READ: Any authenticated user can read game details.
      allow read: if request.auth != null;

      // CREATE: Any authenticated user can create a game (challenge).
      allow create: if request.auth != null;

      // UPDATE: Only players part of the game can update it.
      allow update: if request.auth != null && resource.data.playerUids.hasAny([request.auth.uid]);
      
      // DELETE: Only the creator can delete their own challenge.
      allow delete: if request.auth != null && request.auth.uid == resource.data.createdBy.uid;
    }

    // =============================================
    // Transactions Collection
    // =============================================
    match /transactions/{transactionId} {
      // READ: A user can only read their own transactions.
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;

      // CREATE, UPDATE, DELETE: No client should be able to create/update/delete transactions directly.
      // This is handled by secure Cloud Functions or Transactions in the backend.
      allow write: if false;
    }
    
    // =============================================
    // Deposits Collection
    // =============================================
    match /deposits/{depositId} {
       // CREATE: Any authenticated user can create a deposit request.
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      
      // READ, UPDATE, DELETE: Only admins should manage deposits from the backend.
      // Allowing users to read their own might be useful, but for now, we'll keep it admin-only.
      allow read, write: if false;
    }
    
    // =============================================
    // Withdrawals Collection
    // =============================================
    match /withdrawals/{withdrawalId} {
       // CREATE: Any authenticated user can create a withdrawal request for themselves.
       allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
       
       // No one else can read/write from the client. This must be handled by an admin panel with elevated privileges.
       allow read, write: if false;
    }
    
    // =============================================
    // Notifications Collection
    // =============================================
    match /notifications/{notificationId} {
      // READ: All authenticated users can read public notifications.
      allow read: if request.auth != null;
      
      // WRITE: Only an admin should be able to create notifications (handled via backend/admin SDK).
      allow write: if false;
    }

    // =============================================
    // Settings Collection
    // =============================================
    match /settings/{docId} {
        // READ: All authenticated users can read the settings document.
        allow read: if request.auth != null;
        
        // WRITE: Settings should only be writable from the admin panel/backend.
        allow write: if false;
    }
    
    // =============================================
    // Tournaments Collection
    // =============================================
    match /tournaments/{tournamentId} {
        // READ: Any authenticated user can read tournament details.
        allow read: if request.auth != null;
        
        // CREATE, UPDATE, DELETE: Handled by admin panel/backend logic.
        allow write: if false; 
    }
  }
}
