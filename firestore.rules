rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function hasRole(roles) {
      return isAuth() && request.auth.token.role in roles;
    }
    
    // Default deny all access
    match /{document=**} {
      allow read, write: if false;
    }

    // Settings can be read by anyone, but only written by superadmin
    match /settings/{docId} {
      allow get: if true;
      allow list, write: if hasRole(['superadmin']);
    }

    // Notifications can be read by anyone, but only written by superadmin
    match /notifications/{docId} {
      allow get, list: if true;
      allow write: if hasRole(['superadmin']);
    }

    // Users Collection
    match /users/{userId} {
      // READ: A user can read their own profile. Admins can read any profile.
      allow get: if isOwner(userId) || hasRole(['superadmin', 'finance', 'support']);
      
      // LIST: Only admins can list all users.
      allow list: if hasRole(['superadmin', 'finance', 'support']);

      // CREATE: A user can create their own document upon signup.
      allow create: if isAuth();

      // UPDATE: A user can update their own profile. Admins can update any profile.
      allow update: if isOwner(userId) || hasRole(['superadmin', 'finance', 'support']);

      // DELETE: Only superadmin can delete a user.
      allow delete: if hasRole(['superadmin']);
      
      // Subcollection: userNotifications
      match /userNotifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Transactions
    match /transactions/{transactionId} {
      // READ: User can read their own transactions. Admins can read any.
      allow get: if isAuth() && (isOwner(resource.data.userId) || hasRole(['superadmin', 'finance', 'support']));
      allow list: if hasRole(['superadmin', 'finance', 'support']);

      // CREATE: Any authenticated user can create a transaction (e.g., for game fees, deposits).
      allow create: if isAuth();

      // UPDATE/DELETE: Only admins can modify transactions.
      allow update, delete: if hasRole(['superadmin', 'finance', 'support']);
    }

    // Games
    match /games/{gameId} {
      // READ: Any authenticated user can see games.
      allow get, list: if isAuth();

      // CREATE: Any authenticated user can create a game.
      allow create: if isAuth();

      // UPDATE: A user can update a game if they are part of it. Admins can update any game.
      allow update: if isAuth() && (request.auth.uid in resource.data.playerUids || hasRole(['superadmin', 'finance', 'support']));

      // DELETE: Only admins can delete games.
      allow delete: if hasRole(['superadmin']);
    }

    // Withdrawals
    match /withdrawals/{withdrawalId} {
      // READ: Any authenticated user can see withdrawal requests (e.g., in their own history). Admins can see all.
      allow get, list: if isAuth();

      // CREATE: A user can only create a withdrawal request for themselves.
      allow create: if isOwner(request.resource.data.userId);

      // UPDATE/DELETE: Only admins can modify withdrawals.
      allow update, delete: if hasRole(['superadmin', 'finance']);
    }

    // Deposits
    match /deposits/{depositId} {
      // READ: Any authenticated user can see deposit requests (e.g., in their own history). Admins can see all.
      allow get, list: if isAuth();

      // CREATE: A user can only create a deposit request for themselves.
      allow create: if isOwner(request.resource.data.userId);

      // UPDATE/DELETE: Only admins can modify deposits.
      allow update, delete: if hasRole(['superadmin', 'finance']);
    }

    // Tournaments
    match /tournaments/{tournamentId} {
      // READ: Anyone can read tournament details.
      allow get, list: if true;

      // WRITE: Only superadmins can create, update, or delete tournaments.
      allow write: if hasRole(['superadmin']);
    }
  }
}
