rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can only read and write their own document.
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Admins can read/write anything in the users collection.
    match /users/{userId} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['superadmin', 'finance', 'support'];
    }

    // Games collection rules
    match /games/{gameId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      // Allow update if the user is already in the game OR is being added to the game
      allow update: if request.auth != null && (request.auth.uid in resource.data.playerUids || request.auth.uid in request.resource.data.playerUids);
      // Allow delete only if the game is a 'challenge' and the user is the creator
      allow delete: if request.auth != null && resource.data.status == 'challenge' && request.auth.uid == resource.data.createdBy.uid;
    }

    // Tournaments collection rules
    match /tournaments/{tournamentId} {
      allow read: if request.auth != null;
      // Only admins can create/delete/update tournaments
      allow create, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
      // Allow update for admins, or for players joining (adding themselves to the players array)
      allow update: if request.auth != null && 
                      (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin' || 
                      (request.auth.uid in request.resource.data.players && !(request.auth.uid in resource.data.players)));
    }
    
    // Transactions can be created by any authenticated user. Reading is restricted.
    match /transactions/{transactionId} {
      allow create: if request.auth != null;
      // Users can only read their own transactions.
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      // Admins can read all transactions.
      allow read: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['superadmin', 'finance', 'support'];
      allow update, delete: if false; // No one can update/delete transactions
    }

    // Withdrawals can be created by users, but only read/updated by admins.
    match /withdrawals/{withdrawalId} {
        allow create: if request.auth != null;
        allow read, update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['superadmin', 'finance'];
        allow delete: if false;
    }

    // Deposits can be created by users, but only read/updated by admins.
    match /deposits/{depositId} {
        allow create: if request.auth != null;
        // The user who created it can read it. Admins can also read.
        allow read: if request.auth != null && (request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['superadmin', 'finance']);
        // Only admins can update (approve/reject).
        allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['superadmin', 'finance'];
        allow delete: if false;
    }

    // Settings can only be read/written by superadmin.
    match /settings/app-config {
      allow read: if request.auth != null;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
    }

    // Notifications can be created by admins, but read by anyone logged in.
    match /notifications/{notificationId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'superadmin';
        allow update, delete: if false; // Only allow creating/reading
    }
    
    // User-specific notification status subcollection
    match /users/{userId}/userNotifications/{notificationId} {
        // Users can read/write their own notification statuses
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
}
