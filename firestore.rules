
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper functions to make rules cleaner
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuth() && request.auth.token.role in ['superadmin', 'finance', 'support'];
    }

    function isSuperAdmin() {
      return isAuth() && request.auth.token.role == 'superadmin';
    }

    // Settings can be read by anyone, but only written by superadmin
    match /settings/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    // Notifications can be read by anyone, but only written by superadmin
    match /notifications/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    // Users collection rules
    match /users/{userId} {
      // READ: A user can read their own document, or an admin can read any.
      allow get: if isOwner(userId) || isAdmin();
      // LIST: Only admins can list all users. This is for the admin panel.
      allow list: if isAdmin();
      
      // CREATE: A user can create their own document upon signup.
      allow create: if isOwner(userId);
      
      // UPDATE: A user can update their own document, or an admin can update any.
      allow update: if isOwner(userId) || isAdmin();
      
      // DELETE: Only a superadmin can delete a user.
      allow delete: if isSuperAdmin();

      // Subcollection for user-specific notification status
      match /userNotifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Transactions collection rules
    match /transactions/{transactionId} {
      // READ: A user can read their own transactions, or an admin can read any.
      allow get: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
      allow list: if isAdmin(); // For admin panel transaction history

      // CREATE: An authenticated user can create a transaction for themselves.
      // This is crucial for logging deposits, withdrawals, game fees, etc.
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      
      // UPDATE/DELETE: Only admins can modify transactions.
      allow update, delete: if isAdmin();
    }

    // Games collection rules
    match /games/{gameId} {
      // READ: Any authenticated user can see games (challenges, ongoing battles).
      allow read, list: if isAuth();
      
      // CREATE: Any authenticated user can create a game (challenge).
      allow create: if isAuth();

      // UPDATE: Any player in the game can update it, or an admin can.
      allow update: if isAuth() && (request.auth.uid in resource.data.playerUids || isAdmin());

      // DELETE: Only an owner of a 'challenge' game or an admin can delete.
      allow delete: if isAuth() && (
        (resource.data.status == 'challenge' && resource.data.createdBy.uid == request.auth.uid) || isAdmin()
      );
    }
    
    // Withdrawals collection rules
    match /withdrawals/{withdrawalId} {
      // READ: Admins and the user who owns the request can read it.
      allow read: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
      allow list: if isAdmin();

      // CREATE: A user can create their own withdrawal request.
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      
      // UPDATE/DELETE: Only admins can process withdrawals.
      allow update, delete: if isAdmin();
    }
    
    // Deposits collection rules
    match /deposits/{depositId} {
      // READ: Admins and the user who owns the request can read it.
      allow read: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
      allow list: if isAdmin();

      // CREATE: A user can create their own deposit request.
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      
      // UPDATE/DELETE: Only admins can process deposits.
      allow update, delete: if isAdmin();
    }
    
    // Tournaments collection rules
    match /tournaments/{tournamentId} {
      // READ: Anyone can read tournament details.
      allow read, list: if true;
      
      // WRITE: Only superadmins can create, update, or delete tournaments.
      allow write: if isSuperAdmin();
    }
  }
}
