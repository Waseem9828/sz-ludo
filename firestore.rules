
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      // Check the role of the currently authenticated user from their document in the 'users' collection.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['superadmin', 'finance', 'support'];
    }

    // Users Collection
    match /users/{userId} {
      // A new user can create their own document.
      allow create: if isAuth() && isOwner(userId);
      // A user can read their own data. Admins can read any user's data.
      allow get: if isAuth() && (isOwner(userId) || isAdmin());
      // A user can update their own data. Admins can update any user's data.
      allow update: if isAuth() && (isOwner(userId) || isAdmin());
      // No one can delete a user document from the client-side.
      allow delete: if false;
      
      // Rules for the userNotifications subcollection within each user document.
      match /userNotifications/{notificationId} {
        // A user can read and write to their own notification status subcollection.
        allow read, write: if isAuth() && isOwner(userId);
      }
    }

    // Games Collection
    match /games/{gameId} {
      // Any authenticated user can view the list of games or get a specific game.
      allow list, get: if isAuth();
      // Any authenticated user can create a new game.
      allow create: if isAuth();
      // An admin or one of the players in the game can update it.
      allow update: if isAuth() && (isAdmin() || request.auth.uid in resource.data.playerUids);
      // The creator can delete a 'challenge' game. An admin can delete any game.
      allow delete: if isAuth() && (isAdmin() || (resource.data.status == 'challenge' && resource.data.createdBy.uid == request.auth.uid));
    }

    // Transactions Collection
    match /transactions/{transactionId} {
      // A user can create a transaction record for themselves.
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      // A user can see their own transactions. An admin can see any transaction.
      allow get, list: if isAuth() && (isAdmin() || isOwner(resource.data.userId));
    }

    // Settings Collection
    match /settings/{docId} {
      // Anyone can read the application settings.
      allow get: if true;
      // Only admins can change the settings.
      allow write: if isAuth() && isAdmin();
    }
    
    // Notifications Collection
    match /notifications/{notificationId} {
      // Anyone can read notifications.
      allow get, list: if true;
      // Only admins can create or change notifications.
      allow write: if isAuth() && isAdmin();
    }
    
    // Withdrawals Collection
    match /withdrawals/{withdrawalId} {
      // A user can create their own withdrawal request.
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      // Admins can view and manage all withdrawal requests.
      allow get, list, update: if isAuth() && isAdmin();
    }
    
    // Deposits Collection
    match /deposits/{depositId} {
      // A user can create their own deposit request.
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      // Admins can view and manage all deposit requests.
      allow get, list, update: if isAuth() && isAdmin();
    }

    // Tournaments Collection
    match /tournaments/{tournamentId} {
        // Anyone authenticated can read tournament data.
        allow get, list: if isAuth();
        // Only admins can create, update, or delete tournaments.
        allow write, delete: if isAuth() && isAdmin();
    }
  }
}
