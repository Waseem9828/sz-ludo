
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isAdmin() {
      // Ensure the user has a custom claim 'role' set by a trusted backend.
      // This is more secure than checking a field in their user document.
      // For now, we will rely on the user document field as the app is designed.
      return isAuth() && request.auth.token.role in ['superadmin', 'finance', 'support'];
    }

    function isSuperAdmin() {
      return isAuth() && request.auth.token.role == 'superadmin';
    }

    // Settings can be read by anyone, but only written by admin
    match /settings/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    // Notifications can be read by anyone, but only written by admin
    match /notifications/{docId} {
      allow read: if true;
      allow write: if isSuperAdmin();
    }
    
    // Users collection
    match /users/{userId} {
      // READ: A user can read their own document. An admin can read any document.
      allow get: if isOwner(userId) || isAdmin();
      // LIST: Only admins can list all users.
      allow list: if isAdmin();

      // CREATE: A new user can create their own document upon signup. An admin can also create users.
      allow create: if isOwner(userId) || isAdmin();

      // UPDATE: A user can update their own document. An admin can update any document.
      allow update: if isOwner(userId) || isAdmin();

      // DELETE: Only a superadmin can delete a user.
      allow delete: if isSuperAdmin();

      // Subcollection: userNotifications
      match /userNotifications/{notificationId} {
        allow read, write: if isOwner(userId);
      }
    }

    // Transactions
    match /transactions/{transactionId} {
      // READ: A user can read their own transactions. Admins can read all transactions.
      allow get: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
      allow list: if isAdmin();
      
      // CREATE: Any authenticated user can create a transaction record
      // (e.g., on signup, game creation, withdrawal request).
      // The `userId` field is validated by the application logic inside a transaction.
      allow create: if isAuth();

      // UPDATE/DELETE: Only admins can modify transaction records.
      allow update, delete: if isAdmin();
    }

    // Games
    match /games/{gameId} {
      // READ: Any authenticated user can read/list games (for lobbies).
      allow get, list: if isAuth();
      
      // CREATE/UPDATE: Any authenticated user can create/update games
      // (create challenge, accept challenge, submit result).
      allow create, update: if isAuth();
      
      // DELETE: Only admins can delete games (e.g., old records).
      allow delete: if isAdmin();
    }
    
    // Withdrawals
    match /withdrawals/{withdrawalId} {
      // READ: A user can read their own withdrawal requests. Admins can list/read all.
      allow get: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
      allow list: if isAdmin();
      
      // CREATE: A user can create a withdrawal request for themselves.
      allow create: if isOwner(request.resource.data.userId);
      
      // UPDATE/DELETE: Only admins can process withdrawals.
      allow update, delete: if isAdmin();
    }
    
    // Deposits
    match /deposits/{depositId} {
      // READ: A user can read their own deposit requests. Admins can list/read all.
      allow get: if isAuth() && (resource.data.userId == request.auth.uid || isAdmin());
      allow list: if isAdmin();
      
      // CREATE: A user can create a deposit request for themselves.
      allow create: if isOwner(request.resource.data.userId);
      
      // UPDATE/DELETE: Only admins can process deposits.
      allow update, delete: if isAdmin();
    }
    
    // Tournaments
    match /tournaments/{tournamentId} {
      // READ: Any authenticated user can read/list tournaments.
      allow get, list: if isAuth();
      // CREATE/UPDATE/DELETE: Only superadmins can manage tournaments.
      allow create, update, delete: if isSuperAdmin();
    }
  }
}
