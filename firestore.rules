
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is the superadmin by email.
    function isSuperAdmin() {
      return request.auth.token.email == 'admin@example.com';
    }

    // Helper function to check if the user has an admin role by reading their document.
    // Use this cautiously and not inside list rules.
    function hasAdminRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['superadmin', 'finance', 'support'];
    }

    // --- User Data Rules ---
    match /users/{userId} {
      // A user can read/write their own data.
      allow read, update: if request.auth.uid == userId;
      // Anyone can create a user (sign-up).
      allow create: if request.auth.uid != null;
      // Admins can read any user's profile.
      allow get: if hasAdminRole();
      // Allow admin to list all users. Note: This is a broad rule for simplicity.
      // In production, you might restrict the fields returned.
      allow list: if hasAdminRole();
    }
    
    // --- Settings Rules ---
    match /settings/{docId} {
        // Anyone can read settings.
        allow get, list: if request.auth.uid != null;
        // Only superadmin can write/update settings.
        allow write: if isSuperAdmin();
    }

    // --- Game Rules ---
    match /games/{gameId} {
        // Logged-in users can list challenges and ongoing games.
        allow list: if request.auth.uid != null;
        // Logged-in users can create games (challenges).
        allow create: if request.auth.uid != null;
        
        // Players in the game can read/update it. Admins can also read/update.
        allow get, update: if request.auth.uid in resource.data.playerUids || hasAdminRole();
        
        // The creator can delete their own challenge.
        allow delete: if request.auth.uid == resource.data.createdBy.uid && resource.data.status == 'challenge';
    }
    
    // --- Transaction Rules ---
    match /transactions/{transactionId} {
        // A user can only see their own transactions.
        allow list: if request.auth.uid == request.query.where[0][2];
        // Allow get for the user who owns it or an admin
        allow get: if get(/databases/$(database)/documents/transactions/$(transactionId)).data.userId == request.auth.uid || hasAdminRole();
        // Transactions are created by server-side logic (updateUserWallet), so client-side creation is disallowed.
        allow create: if false; 
        allow update, delete: if false; // Transactions should be immutable.
    }
    
    // --- Deposit Request Rules ---
    match /deposits/{depositId} {
        // Users can create their own deposit requests.
        allow create: if request.auth.uid == request.resource.data.userId;
        // Admins can view and update (approve/reject) deposit requests.
        allow get, list, update: if hasAdminRole();
    }

    // --- Withdrawal Request Rules ---
     match /withdrawals/{withdrawalId} {
        // Users can create their own withdrawal requests.
        allow create: if request.auth.uid == request.resource.data.userId;
        // Admins can view and update (approve/reject) withdrawal requests.
        allow get, list, update: if hasAdminRole();
    }

    // --- Tournament Rules ---
    match /tournaments/{tournamentId} {
        // Any authenticated user can see the list of tournaments.
        allow list, get: if request.auth.uid != null;
        // Only superadmin can create/update tournaments.
        allow create, update: if isSuperAdmin();
        // Users can join by calling the joinTournament function, which runs with admin privileges, so no direct client write needed.
    }

    // --- Notification Rules ---
    match /notifications/{notificationId} {
      // Any authenticated user can read public notifications.
      allow get, list: if request.auth.uid != null;
      // Only superadmin can create/update notifications.
      allow create, update: if isSuperAdmin();
    }

    // User-specific notification read status
    match /users/{userId}/userNotifications/{notificationId} {
        // A user can manage their own notification read status.
        allow read, write: if request.auth.uid == userId;
    }
  }
}
